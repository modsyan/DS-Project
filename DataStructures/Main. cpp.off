#include <iostream>
using namespace std;
// declaring node class
template<class L>
struct node {
  node<L>* next;
  L data;
};
// declaring linked list class
template<class L>
class LinkedList
{
public:
  node<L>* head;
  node<L>* last;

  LinkedList<L>() {
    head = NULL;
    last = NULL;
  }
  
  void add(L data) {
    if(!head) {
      // when there is no element in the list
      head = new node<L>;
      head->data = data;
      head->next = NULL;
      last = head;
    } else {
      // when the list is not empty
      if(last == head) {
        // when the list has one element
        last = new node<L>;
        last->data = data;
        last->next = NULL;
        head->next = last;
      } else {
        // when the list has more than one element
        node<L>* insdata = new node<L>;
        insdata->data = data;
        insdata->next = NULL;
        last->next = insdata;
        last = insdata;
      }
    }
  }
  L get(int index) {
    if(index == 0) {
      // returning the head element
      return this->head->data;
    } else {
      // Get the index'th element
      node<L>* curr = this->head;
      for(int i = 0; i < index; ++i) {
        curr = curr->next;
      }
      return curr->data;
    }
  }
  L operator[](int index) {
    return get(index);
  }
};
int main(int argc, char const *argv[])
{
  LinkedList<string> Str;
  Str.add("Hello");
  cout<<Str.get(0)<<endl;
  LinkedList<int> INT;
  INT.add(4);
    cout<<INT.get(0);
}